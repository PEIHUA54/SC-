// ============================================================================
// LOG記錄功能類別
// ============================================================================

using System;
using System.IO;

/// <summary>
/// 日誌記錄工具類別
/// </summary>
public class Logger
{
/// <summary>
/// 寫入LOG記錄
/// </summary>
/// <param name="message">要記錄的訊息</param>
public static void WriteLog(string message)
{
try
{
// 取得 EXE 所在目錄
string exePath = AppDomain.CurrentDomain.BaseDirectory;

```
        // 建立 Log 資料夾（與 EXE 同層）
        string logFolder = Path.Combine(exePath, "Log");
        if (!Directory.Exists(logFolder))
            Directory.CreateDirectory(logFolder);

        // 建立每日一檔的 LOG 檔案，檔名格式：YYYYMMDD_HIPOS檔案比對.log
        string logFileName = DateTime.Now.ToString("yyyyMMdd") + "_HIPOS檔案比對.log";
        string logFile = Path.Combine(logFolder, logFileName);

        // 寫入 LOG，格式：YYYYMMDD_hh:mm:ss 訊息內容
        using (StreamWriter sw = File.AppendText(logFile))
        {
            string timeStamp = DateTime.Now.ToString("yyyyMMdd_HH:mm:ss");
            sw.WriteLine($"{timeStamp} {message}");
        }
    }
    catch (Exception ex)
    {
        // LOG寫入失敗時不影響主程式運作，但可以顯示警告
        System.Diagnostics.Debug.WriteLine($"LOG寫入失敗：{ex.Message}");
    }
}

/// <summary>
/// 寫入版本比對結果LOG
/// </summary>
/// <param name="fileType">檔案類型</param>
/// <param name="result">比對結果</param>
public static void WriteComparisonLog(string fileType, string result)
{
    string message = $"執行1.版本比對{fileType}結果:{result}";
    WriteLog(message);
}

/// <summary>
/// 寫入按鈕執行LOG
/// </summary>
/// <param name="buttonNumber">按鈕編號</param>
/// <param name="action">執行動作</param>
public static void WriteButtonLog(int buttonNumber, string action)
{
    string message = $"執行{buttonNumber}.{action}";
    WriteLog(message);
}
```

}

// ============================================================================
// 修改後的按鈕事件處理（加入LOG記錄）
// ============================================================================

#region 按鈕事件處理（加入LOG記錄版本）

private void button1_Click(object sender, EventArgs e)
{
try
{
button1.Enabled = false;
this.Cursor = Cursors.WaitCursor;

```
    dataGridView1.Rows.Clear();

    // 讀取總部版本資訊
    var serverFiles = ReadServerVersionFile();
    if (serverFiles == null)
    {
        MessageBox.Show("無法讀取總部版本檔案！", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }

    // 讀取門市版本資訊
    var clientFiles = ReadClientFiles();

    // 執行比對並更新顯示
    bool allCorrect = CompareAndDisplay(serverFiles, clientFiles);

    // **新增：記錄比對結果LOG**
    LogComparisonResults(serverFiles, clientFiles);

    // 對應按鈕
    UpdateButtonStates(allCorrect);

    // 更新比對時間顯示
    labelCompareTime.Text = "比對執行時間：" + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");

    MessageBox.Show("版本比對完成！", "比對結果", MessageBoxButtons.OK, MessageBoxIcon.Information);
}
catch (Exception ex)
{
    // 記錄錯誤LOG
    Logger.WriteLog($"執行1.版本比對發生錯誤:{ex.Message}");
    MessageBox.Show("版本比對發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
finally
{
    button1.Enabled = true;
    this.Cursor = Cursors.Default;
}
```

}

private void button2_Click_1(object sender, EventArgs e)
{
try
{
// **記錄按鈕2執行LOG**
Logger.WriteButtonLog(2, “接收HIPOS最新版本與更新”);

```
    // 取得bat檔路徑 - 根據測試/正式模式選擇
    string batPath = useTestPath ? testBatPath : prodBatPath;

    // 安全驗證bat檔路徑
    if (!IsValidBatPath(batPath))
    {
        Logger.WriteLog("執行2.bat檔路徑驗證失敗");
        MessageBox.Show("無效的bat檔案路徑", "安全警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        return;
    }

    // 檢查bat檔是否存在
    if (!File.Exists(batPath))
    {
        Logger.WriteLog($"執行2.找不到bat檔案：{batPath}");
        MessageBox.Show("找不到bat檔案：" + Path.GetFileName(batPath), "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }

    button2.Enabled = false;
    this.Cursor = Cursors.WaitCursor;

    // **修復Command Injection：使用更安全的執行方式**
    ProcessStartInfo startInfo = new ProcessStartInfo
    {
        FileName = "cmd.exe",
        Arguments = $"/c \"{batPath}\"",
        UseShellExecute = false,
        CreateNoWindow = true,  // 在背景執行
        WorkingDirectory = Path.GetDirectoryName(batPath)
    };

    using (Process process = Process.Start(startInfo))
    {
        // 等待執行完成，但設定逾時
        bool finished = process.WaitForExit(5 * 60 * 1000); // 5分鐘逾時
        
        if (finished && process.ExitCode == 0)
        {
            Logger.WriteLog("執行2.接收HIPOS最新版本與更新完成");
            MessageBox.Show("版本更新完成！請重新執行版本比對功能", "更新完成",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        else if (!finished)
        {
            Logger.WriteLog("執行2.更新程序執行逾時");
            MessageBox.Show("更新程序執行時間過長，請檢查是否有問題", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
            if (!process.HasExited)
            {
                process.Kill();
            }
        }
        else
        {
            Logger.WriteLog($"執行2.更新程序異常結束，錯誤代碼:{process.ExitCode}");
            MessageBox.Show("更新過程發生問題，請檢查bat檔案", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }
    }
}
catch (Exception ex)
{
    Logger.WriteLog($"執行2.接收HIPOS最新版本與更新發生錯誤:{ex.Message}");
    MessageBox.Show("執行更新時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
finally
{
    button2.Enabled = true;
    this.Cursor = Cursors.Default;
}
```

}

private void button3_Click(object sender, EventArgs e)
{
try
{
// **記錄按鈕3執行LOG**
Logger.WriteButtonLog(3, “清除設定檔資料”);

```
    ExecuteDeleteSQL();  // 執行 SQL 刪除操作
    
    // 記錄清除完成LOG
    Logger.WriteLog("執行3.清除設定檔資料完成");
    
    MessageBox.Show("已刪除完成！", "清除完成", MessageBoxButtons.OK, MessageBoxIcon.Information);

    // 清除完成後重置按鈕狀態
    InitializeButtons();
}
catch (Exception ex)
{
    Logger.WriteLog($"執行3.清除設定檔資料發生錯誤:{ex.Message}");
    MessageBox.Show("清除設定檔時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
```

}

#endregion

// ============================================================================
// 新增：記錄比對結果的方法
// ============================================================================

/// <summary>
/// 記錄版本比對結果LOG
/// </summary>
/// <param name="serverFiles">總部檔案資訊</param>
/// <param name="clientFiles">門市檔案資訊</param>
private void LogComparisonResults(FileInfo[] serverFiles, FileInfo[] clientFiles)
{
try
{
// 比對三個檔案並記錄結果
for (int i = 0; i < 3; i++)
{
bool isCorrect = false;
string result = “不正確”;
string fileType = “”;

```
        // 取得檔案類型名稱
        switch (i)
        {
            case 0: fileType = "SC.Service"; break;
            case 1: fileType = "SC.Web"; break;
            case 2: fileType = "SC.Update"; break;
        }

        // 檢查總部和門市檔案是否都存在
        if (serverFiles[i] != null && clientFiles[i] != null &&
            clientFiles[i].ModifyTime != DateTime.MinValue)
        {
            // 比對時間和大小
            bool timeMatches = CompareDateTime(serverFiles[i].ModifyTime, clientFiles[i].ModifyTime);
            bool sizeMatches = (serverFiles[i].FileSize == clientFiles[i].FileSize);

            isCorrect = timeMatches && sizeMatches;
            result = isCorrect ? "正確" : "不正確";
        }
        else
        {
            result = "檔案遺失";
        }

        // 記錄比對結果LOG
        Logger.WriteComparisonLog(fileType, result);
    }
}
catch (Exception ex)
{
    Logger.WriteLog($"記錄比對結果時發生錯誤:{ex.Message}");
}
```

}

// ============================================================================
// 新增：bat檔路徑安全驗證方法
// ============================================================================

/// <summary>
/// 驗證bat檔路徑是否安全
/// </summary>
/// <param name="batPath">bat檔路徑</param>
/// <returns>是否安全</returns>
private bool IsValidBatPath(string batPath)
{
try
{
// 檢查路徑是否為空或null
if (string.IsNullOrWhiteSpace(batPath))
return false;

```
    // 檢查是否為.bat或.cmd檔案
    string extension = Path.GetExtension(batPath).ToLowerInvariant();
    if (extension != ".bat" && extension != ".cmd")
        return false;

    // 檢查路徑是否包含危險字符
    char[] invalidChars = { '|', '&', ';', '<', '>', '^' };
    if (batPath.IndexOfAny(invalidChars) != -1)
        return false;

    // 檢查是否為絕對路徑
    if (!Path.IsPathRooted(batPath))
        return false;

    return true;
}
catch
{
    return false;
}
```

}

// ============================================================================
// LOG檔案範例內容
// ============================================================================

/*
LOG檔案將會建立在程式同一層的Log資料夾中，檔名格式：YYYYMMDD_HIPOS檔案比對.log

範例內容：
20250109_14:30:15 執行1.版本比對SC.Service結果:不正確
20250109_14:30:15 執行1.版本比對SC.Web結果:正確
20250109_14:30:15 執行1.版本比對SC.Update結果:正確
20250109_14:32:20 執行2.接收HIPOS最新版本與更新
20250109_14:35:45 執行2.接收HIPOS最新版本與更新完成
20250109_14:36:10 執行1.版本比對SC.Service結果:正確
20250109_14:36:10 執行1.版本比對SC.Web結果:正確
20250109_14:36:10 執行1.版本比對SC.Update結果:正確
20250109_14:38:25 執行3.清除設定檔資料
20250109_14:38:26 執行3.清除設定檔資料完成
*/

// ============================================================================
// 使用說明
// ============================================================================

/*

1. 將Logger類別加入到您的專案中
1. 將修改後的按鈕事件方法替換原有的方法
1. 加入LogComparisonResults和IsValidBatPath兩個新方法
1. 確保專案中已引用System.IO命名空間

執行後：

- 每次按按鈕1會記錄三個檔案的比對結果
- 每次按按鈕2會記錄接收更新的開始和結果
- 每次按按鈕3會記錄清除設定檔的執行
- LOG檔案會累計寫入，每日一個檔案
- LOG檔案位於程式目錄的Log子資料夾中
  */