// ============================================================================
// 最終版Logger.cs（LOG檔案直接與EXE同層）
// ============================================================================

using System;
using System.IO;

namespace HIPOSFileComparer
{
/// <summary>
/// 日誌記錄工具類別
/// </summary>
public class Logger
{
/// <summary>
/// 寫入LOG記錄
/// LOG檔案位置：程式目錄\YYYYMMDD_HIPOS檔案比對.log
/// </summary>
/// <param name="message">要記錄的訊息</param>
public static void WriteLog(string message)
{
try
{
// 取得 EXE 所在目錄（與EXE同一層，不建立子資料夾）
string exePath = AppDomain.CurrentDomain.BaseDirectory;

```
            // 建立每日一檔的 LOG 檔案，直接放在EXE同一層
            string logFileName = DateTime.Now.ToString("yyyyMMdd") + "_HIPOS檔案比對.log";
            string logFile = Path.Combine(exePath, logFileName);

            // 寫入 LOG
            using (StreamWriter sw = File.AppendText(logFile))
            {
                string timeStamp = DateTime.Now.ToString("yyyyMMdd_HH:mm:ss");
                sw.WriteLine($"{timeStamp} {message}");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"LOG寫入失敗：{ex.Message}");
        }
    }
}
```

}

// ============================================================================
// 修改CompareAndDisplay方法（加入詳細檔案資訊到LOG）
// ============================================================================

private bool CompareAndDisplay(FileInfo[] serverFiles, FileInfo[] clientFiles)
{
bool allCorrect = true;

```
// 逐一比對三個檔案
for (int i = 0; i < 3; i++)
{
    bool isCorrect = false;
    string result = "不正確";
    string fileType = GetFileNameByIndex(i); // SC.Service, SC.Web, SC.Update

    // 檔案資訊變數
    string clientTime = "無資料";
    string clientSize = "無資料";
    string serverTime = "無資料";
    string serverSize = "無資料";

    // 檢查總部和門市檔案是否都存在
    if (serverFiles[i] != null && clientFiles[i] != null &&
        clientFiles[i].ModifyTime != DateTime.MinValue)
    {
        // 準備檔案資訊
        clientTime = clientFiles[i].ModifyTime.ToString("yyyy/MM/dd HH:mm:ss");
        clientSize = clientFiles[i].FileSize.ToString();
        serverTime = serverFiles[i].ModifyTime.ToString("yyyy/MM/dd HH:mm:ss");
        serverSize = serverFiles[i].FileSize.ToString();

        // 使用精確的時間比對
        bool timeMatches = CompareDateTime(serverFiles[i].ModifyTime, clientFiles[i].ModifyTime);
        bool sizeMatches = (serverFiles[i].FileSize == clientFiles[i].FileSize);

        isCorrect = timeMatches && sizeMatches;
        result = isCorrect ? "正確" : "不正確";
    }
    else
    {
        // 處理檔案遺失情況
        if (serverFiles[i] != null)
        {
            serverTime = serverFiles[i].ModifyTime.ToString("yyyy/MM/dd HH:mm:ss");
            serverSize = serverFiles[i].FileSize.ToString();
        }
        
        if (clientFiles[i] != null && clientFiles[i].ModifyTime != DateTime.MinValue)
        {
            clientTime = clientFiles[i].ModifyTime.ToString("yyyy/MM/dd HH:mm:ss");
            clientSize = clientFiles[i].FileSize.ToString();
        }

        string missingFile = "";
        if (serverFiles[i] == null) missingFile += "總部版本檔案遺失 ";
        if (clientFiles[i] == null || clientFiles[i].ModifyTime == DateTime.MinValue)
            missingFile += "門市檔案遺失";

        MessageBox.Show($"{GetFileNameByIndex(i)} {missingFile}", "檔案遺失錯誤",
            MessageBoxButtons.OK, MessageBoxIcon.Error);
        result = "檔案遺失";
    }

    if (!isCorrect) allCorrect = false;

    // **記錄詳細的比對結果LOG（一行包含所有資訊）**
    string logMessage = $"執行1.版本比對{fileType}結果:{result} 門市:{clientTime}/{clientSize} 總部:{serverTime}/{serverSize}";
    Logger.WriteLog(logMessage);

    // 將比對結果加入到 DataGridView 顯示
    AddComparisonRow(
        serverFiles[i]?.Name ?? GetFileNameByIndex(i),
        serverFiles[i]?.ModifyTime.ToString("yyyy/M/d 下午 HH:mm:ss") ?? "無資料",
        serverFiles[i]?.FileSize.ToString() ?? "無資料",
        clientFiles[i]?.ModifyTime.ToString("yyyy/M/d 下午 HH:mm:ss") ?? "無資料",
        clientFiles[i]?.FileSize.ToString() ?? "無資料",
        result,
        isCorrect ? Color.Green : Color.Red
    );
}

return allCorrect;
```

}

// ============================================================================
// 其他按鈕方法（保持簡單）
// ============================================================================

private void button2_Click_1(object sender, EventArgs e)
{
try
{
// **記錄按鈕執行**
Logger.WriteLog(“執行2.接收HIPOS最新版本與更新”);

```
    // 取得bat檔路徑
    string batPath = useTestPath ? testBatPath : prodBatPath;

    // 安全檢查
    if (!IsValidBatPath(batPath))
    {
        MessageBox.Show("無效的bat檔案路徑", "安全警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        return;
    }

    if (!File.Exists(batPath))
    {
        MessageBox.Show("找不到bat檔案：" + Path.GetFileName(batPath), "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }

    button2.Enabled = false;
    this.Cursor = Cursors.WaitCursor;

    // 執行bat檔
    ProcessStartInfo startInfo = new ProcessStartInfo
    {
        FileName = "cmd.exe",
        Arguments = $"/c \"{batPath}\"",
        UseShellExecute = false,
        CreateNoWindow = true,
        WorkingDirectory = Path.GetDirectoryName(batPath)
    };

    using (Process process = Process.Start(startInfo))
    {
        bool finished = process.WaitForExit(5 * 60 * 1000); // 5分鐘逾時
        
        if (finished && process.ExitCode == 0)
        {
            MessageBox.Show("版本更新完成！請重新執行版本比對功能", "更新完成",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        else if (!finished)
        {
            MessageBox.Show("更新程序執行時間過長，請檢查是否有問題", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
            if (!process.HasExited)
            {
                process.Kill();
            }
        }
        else
        {
            MessageBox.Show("更新過程發生問題，請檢查bat檔案", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }
    }
}
catch (Exception ex)
{
    MessageBox.Show("執行更新時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
finally
{
    button2.Enabled = true;
    this.Cursor = Cursors.Default;
}
```

}

private void button3_Click(object sender, EventArgs e)
{
try
{
// **記錄按鈕執行**
Logger.WriteLog(“執行3.清除設定檔資料”);

```
    ExecuteDeleteSQL();
    MessageBox.Show("已刪除完成！", "清除完成", MessageBoxButtons.OK, MessageBoxIcon.Information);

    // 清除完成後重置按鈕狀態
    InitializeButtons();
}
catch (Exception ex)
{
    MessageBox.Show("清除設定檔時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
```

}

// bat檔安全驗證方法
private bool IsValidBatPath(string batPath)
{
try
{
if (string.IsNullOrWhiteSpace(batPath)) return false;

```
    string extension = Path.GetExtension(batPath).ToLowerInvariant();
    if (extension != ".bat" && extension != ".cmd") return false;
    
    char[] invalidChars = { '|', '&', ';', '<', '>', '^' };
    if (batPath.IndexOfAny(invalidChars) != -1) return false;
    
    if (!Path.IsPathRooted(batPath)) return false;
    
    return true;
}
catch
{
    return false;
}
```

}

// ============================================================================
// LOG檔案範例內容
// ============================================================================

/*
檔案位置：與EXE同一層
檔名：20250109_HIPOS檔案比對.log

內容範例：
20250109_14:30:15 執行1.版本比對SC.Service結果:不正確 門市:2025/01/08 10:30:45/2048576 總部:2025/01/09 11:20:30/2048600
20250109_14:30:15 執行1.版本比對SC.Web結果:正確 門市:2025/01/09 09:15:20/1536000 總部:2025/01/09 09:15:20/1536000
20250109_14:30:15 執行1.版本比對SC.Update結果:正確 門市:2025/01/09 08:45:10/896512 總部:2025/01/09 08:45:10/896512
20250109_14:32:20 執行2.接收HIPOS最新版本與更新
20250109_14:38:25 執行3.清除設定檔資料
*/