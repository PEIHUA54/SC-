// ============================================================================
// 簡化版Logger.cs（移除不必要的功能）
// ============================================================================

using System;
using System.IO;

namespace HIPOSFileComparer
{
/// <summary>
/// 日誌記錄工具類別 - 簡化版
/// </summary>
public class Logger
{
/// <summary>
/// 寫入LOG記錄
/// </summary>
/// <param name="message">要記錄的訊息</param>
public static void WriteLog(string message)
{
try
{
// 取得 EXE 所在目錄
string exePath = AppDomain.CurrentDomain.BaseDirectory;

```
            // 建立 Log 資料夾（與 EXE 同層）
            string logFolder = Path.Combine(exePath, "Log");
            if (!Directory.Exists(logFolder))
                Directory.CreateDirectory(logFolder);

            // 建立每日一檔的 LOG 檔案
            string logFileName = DateTime.Now.ToString("yyyyMMdd") + "_HIPOS檔案比對.log";
            string logFile = Path.Combine(logFolder, logFileName);

            // 寫入 LOG
            using (StreamWriter sw = File.AppendText(logFile))
            {
                string timeStamp = DateTime.Now.ToString("yyyyMMdd_HH:mm:ss");
                sw.WriteLine($"{timeStamp} {message}");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"LOG寫入失敗：{ex.Message}");
        }
    }
}
```

}

// ============================================================================
// 修正後的Form1.cs按鈕方法（直接在比對時記錄）
// ============================================================================

// 修改CompareAndDisplay方法，在比對時直接記錄LOG
private bool CompareAndDisplay(FileInfo[] serverFiles, FileInfo[] clientFiles)
{
bool allCorrect = true;

```
// 逐一比對三個檔案
for (int i = 0; i < 3; i++)
{
    bool isCorrect = false;
    string result = "不正確";
    string fileType = GetFileNameByIndex(i); // SC.Service, SC.Web, SC.Update

    // 檢查總部和門市檔案是否都存在
    if (serverFiles[i] != null && clientFiles[i] != null &&
        clientFiles[i].ModifyTime != DateTime.MinValue)
    {
        // 使用精確的時間比對
        bool timeMatches = CompareDateTime(serverFiles[i].ModifyTime, clientFiles[i].ModifyTime);
        bool sizeMatches = (serverFiles[i].FileSize == clientFiles[i].FileSize);

        isCorrect = timeMatches && sizeMatches;
        result = isCorrect ? "正確" : "不正確";
    }
    else
    {
        string missingFile = "";
        if (serverFiles[i] == null) missingFile += "總部版本檔案遺失 ";
        if (clientFiles[i] == null || clientFiles[i].ModifyTime == DateTime.MinValue)
            missingFile += "門市檔案遺失";

        MessageBox.Show($"{GetFileNameByIndex(i)} {missingFile}", "檔案遺失錯誤",
            MessageBoxButtons.OK, MessageBoxIcon.Error);
        result = "檔案遺失";
    }

    if (!isCorrect) allCorrect = false;

    // **直接在這裡記錄比對結果LOG，避免重複比對**
    Logger.WriteLog($"執行1.版本比對{fileType}結果:{result}");

    // 將比對結果加入到 DataGridView 顯示
    AddComparisonRow(
        serverFiles[i]?.Name ?? GetFileNameByIndex(i),
        serverFiles[i]?.ModifyTime.ToString("yyyy/M/d 下午 HH:mm:ss") ?? "無資料",
        serverFiles[i]?.FileSize.ToString() ?? "無資料",
        clientFiles[i]?.ModifyTime.ToString("yyyy/M/d 下午 HH:mm:ss") ?? "無資料",
        clientFiles[i]?.FileSize.ToString() ?? "無資料",
        result,
        isCorrect ? Color.Green : Color.Red
    );
}

return allCorrect;
```

}

// 簡化後的button1_Click（移除重複的LogComparisonResults呼叫）
private void button1_Click(object sender, EventArgs e)
{
try
{
button1.Enabled = false;
this.Cursor = Cursors.WaitCursor;

```
    dataGridView1.Rows.Clear();

    // 讀取總部版本資訊
    var serverFiles = ReadServerVersionFile();
    if (serverFiles == null)
    {
        MessageBox.Show("無法讀取總部版本檔案！", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }

    // 讀取門市版本資訊
    var clientFiles = ReadClientFiles();

    // 執行比對並更新顯示（比對時已經自動記錄LOG了）
    bool allCorrect = CompareAndDisplay(serverFiles, clientFiles);

    // 對應按鈕
    UpdateButtonStates(allCorrect);

    // 更新比對時間顯示
    labelCompareTime.Text = "比對執行時間：" + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");

    MessageBox.Show("版本比對完成！", "比對結果", MessageBoxButtons.OK, MessageBoxIcon.Information);
}
catch (Exception ex)
{
    MessageBox.Show("版本比對發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
finally
{
    button1.Enabled = true;
    this.Cursor = Cursors.Default;
}
```

}

// 簡化後的button2_Click_1
private void button2_Click_1(object sender, EventArgs e)
{
try
{
// **記錄按鈕執行**
Logger.WriteLog(“執行2.接收HIPOS最新版本與更新”);

```
    // 取得bat檔路徑
    string batPath = useTestPath ? testBatPath : prodBatPath;

    // 安全檢查
    if (!IsValidBatPath(batPath))
    {
        MessageBox.Show("無效的bat檔案路徑", "安全警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        return;
    }

    if (!File.Exists(batPath))
    {
        MessageBox.Show("找不到bat檔案：" + Path.GetFileName(batPath), "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }

    button2.Enabled = false;
    this.Cursor = Cursors.WaitCursor;

    // 執行bat檔
    ProcessStartInfo startInfo = new ProcessStartInfo
    {
        FileName = "cmd.exe",
        Arguments = $"/c \"{batPath}\"",
        UseShellExecute = false,
        CreateNoWindow = true,
        WorkingDirectory = Path.GetDirectoryName(batPath)
    };

    using (Process process = Process.Start(startInfo))
    {
        bool finished = process.WaitForExit(5 * 60 * 1000); // 5分鐘逾時
        
        if (finished && process.ExitCode == 0)
        {
            MessageBox.Show("版本更新完成！請重新執行版本比對功能", "更新完成",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        else if (!finished)
        {
            MessageBox.Show("更新程序執行時間過長，請檢查是否有問題", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
            if (!process.HasExited)
            {
                process.Kill();
            }
        }
        else
        {
            MessageBox.Show("更新過程發生問題，請檢查bat檔案", "警告",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }
    }
}
catch (Exception ex)
{
    MessageBox.Show("執行更新時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
finally
{
    button2.Enabled = true;
    this.Cursor = Cursors.Default;
}
```

}

// 簡化後的button3_Click
private void button3_Click(object sender, EventArgs e)
{
try
{
// **記錄按鈕執行**
Logger.WriteLog(“執行3.清除設定檔資料”);

```
    ExecuteDeleteSQL();
    MessageBox.Show("已刪除完成！", "清除完成", MessageBoxButtons.OK, MessageBoxIcon.Information);

    // 清除完成後重置按鈕狀態
    InitializeButtons();
}
catch (Exception ex)
{
    MessageBox.Show("清除設定檔時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
```

}

// bat檔安全驗證方法（保留）
private bool IsValidBatPath(string batPath)
{
try
{
if (string.IsNullOrWhiteSpace(batPath)) return false;

```
    string extension = Path.GetExtension(batPath).ToLowerInvariant();
    if (extension != ".bat" && extension != ".cmd") return false;
    
    char[] invalidChars = { '|', '&', ';', '<', '>', '^' };
    if (batPath.IndexOfAny(invalidChars) != -1) return false;
    
    if (!Path.IsPathRooted(batPath)) return false;
    
    return true;
}
catch
{
    return false;
}
```

}

