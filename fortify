// ============================================================================
// 最快速SSL檢查 - 直接加到您現有的按鈕中
// ============================================================================

private void button2_Click_1(object sender, EventArgs e)
{
// === 加入這段SSL快速檢查 ===
CheckSslQuickly();

```
try
{
    // 您原本的程式碼...
    string batPath = useTestPath ? testBatPath : prodBatPath;
    
    if (!File.Exists(batPath))
    {
        MessageBox.Show("找不到bat檔案：" + batPath, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
    }
    
    // 其他原本的程式碼...
}
catch (Exception ex)
{
    MessageBox.Show("執行更新時發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
```

}

// === 加入這個方法到您的Form中 ===
private void CheckSslQuickly()
{
try
{
string result = “”;

```
    // 1. 測試基本連線
    result += "=== SQL Server SSL 快速檢查 ===\n";
    result += "測試伺服器: " + GetServerName() + "\n\n";
    
    // 2. 測試無SSL連線
    bool basicConnection = TestConnection(false, false);
    result += "1. 基本連線 (無SSL): " + (basicConnection ? "✓ 成功" : "✗ 失敗") + "\n";
    
    if (!basicConnection)
    {
        result += "   → 基本連線失敗，請檢查網路或連線設定\n\n";
        MessageBox.Show(result, "SSL檢查結果", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        return;
    }
    
    // 3. 測試SSL連線 (信任憑證)
    bool sslTrusted = TestConnection(true, true);
    result += "2. SSL連線 (信任憑證): " + (sslTrusted ? "✓ 成功" : "✗ 失敗") + "\n";
    
    if (!sslTrusted)
    {
        result += "   → SQL Server 不支援SSL或SSL未啟用\n";
        result += "   → 建議: 暫時保持 Encrypt=false\n\n";
        MessageBox.Show(result, "SSL檢查結果", MessageBoxButtons.OK, MessageBoxIcon.Information);
        return;
    }
    
    // 4. 測試SSL連線 (驗證憑證)
    bool sslStrict = TestConnection(true, false);
    result += "3. SSL連線 (驗證憑證): " + (sslStrict ? "✓ 成功" : "✗ 失敗") + "\n\n";
    
    // 5. 給出建議
    result += "=== 建議設定 ===\n";
    if (sslStrict)
    {
        result += "Encrypt = true\n";
        result += "TrustServerCertificate = false\n";
        result += "說明: 伺服器有有效SSL憑證，可使用最安全設定\n";
    }
    else if (sslTrusted)
    {
        result += "Encrypt = true\n";
        result += "TrustServerCertificate = true\n";
        result += "說明: 伺服器支援SSL但憑證無效，使用信任模式\n";
    }
    else
    {
        result += "Encrypt = false\n";
        result += "TrustServerCertificate = false\n";
        result += "說明: 伺服器不支援SSL，保持現有設定\n";
    }
    
    MessageBox.Show(result, "SSL檢查結果", MessageBoxButtons.OK, MessageBoxIcon.Information);
}
catch (Exception ex)
{
    MessageBox.Show("SSL檢查過程發生錯誤：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
```

}

// === 加入這個輔助方法 ===
private bool TestConnection(bool useSSL, bool trustCertificate)
{
try
{
string connectionString = GetConnectionStringTest();
SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);

```
    builder.Encrypt = useSSL;
    builder.TrustServerCertificate = trustCertificate;
    builder.ConnectTimeout = 5; // 短逾時，快速測試
    
    using (SqlConnection connection = new SqlConnection(builder.ConnectionString))
    {
        connection.Open();
        
        // 如果使用SSL，驗證確實有加密
        if (useSSL)
        {
            using (SqlCommand command = new SqlCommand(
                "SELECT ENCRYPT_OPTION FROM sys.dm_exec_connections WHERE session_id = @@SPID", 
                connection))
            {
                var encryptOption = command.ExecuteScalar()?.ToString();
                return encryptOption == "TRUE";
            }
        }
        
        return true;
    }
}
catch
{
    return false;
}
```

}

// === 加入這個輔助方法 ===
private string GetServerName()
{
try
{
string connectionString = GetConnectionStringTest();
SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);
return builder.DataSource + “ / “ + builder.InitialCatalog;
}
catch
{
return “未知”;
}
}

// === 您原本的方法保持不變 ===
static private string GetConnectionStringTest()
{
#if DEBUG
return “Data Source=Hilife-tfs;Initial Catalog=HI_TMMAIN;User ID=pos;Password=pos1”;
#else
return “Data Source=localhost;Initial Catalog=POSSC;User ID=sa;Password=23285582”;
#endif
}