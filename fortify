// ============================================================================
// SQL Server SSL支援檢查工具（可在DEBUG模式使用）
// ============================================================================

using System;
using System.Data.SqlClient;
using System.Windows.Forms;
using System.Threading.Tasks;

/// <summary>
/// SSL支援檢查類別
/// </summary>
public class SqlServerSslChecker
{
/// <summary>
/// 完整的SSL支援檢查（主要方法）
/// </summary>
/// <returns></returns>
public static async Task<SslCheckResult> CheckSqlServerSslSupport()
{
var result = new SslCheckResult();

```
    try
    {
        // 取得原始連線字串
        string originalConnectionString = GetConnectionStringTest();
        var builder = new SqlConnectionStringBuilder(originalConnectionString);
        
        Console.WriteLine("=== SQL Server SSL 支援檢查 ===");
        Console.WriteLine($"伺服器：{builder.DataSource}");
        Console.WriteLine($"資料庫：{builder.InitialCatalog}");
        Console.WriteLine();
        
        // 1. 檢查基本連線
        result.BasicConnection = await TestBasicConnection(builder);
        Console.WriteLine($"1. 基本連線: {(result.BasicConnection ? "✓ 成功" : "✗ 失敗")}");
        
        if (!result.BasicConnection)
        {
            Console.WriteLine("   基本連線失敗，無法進行SSL檢查");
            return result;
        }
        
        // 2. 檢查SSL支援（信任憑證模式）
        result.SslSupported = await TestSslConnection(builder, true);
        Console.WriteLine($"2. SSL支援: {(result.SslSupported ? "✓ 支援" : "✗ 不支援")}");
        
        if (result.SslSupported)
        {
            // 3. 檢查憑證驗證
            result.CertificateValid = await TestSslConnection(builder, false);
            Console.WriteLine($"3. 憑證驗證: {(result.CertificateValid ? "✓ 有效憑證" : "✗ 無效/自簽憑證")}");
            
            // 4. 取得SSL詳細資訊
            result.SslDetails = await GetSslDetails(builder);
            Console.WriteLine($"4. SSL詳細資訊:");
            Console.WriteLine($"   加密演算法: {result.SslDetails.EncryptionAlgorithm}");
            Console.WriteLine($"   憑證主體: {result.SslDetails.CertificateSubject}");
            Console.WriteLine($"   憑證發行者: {result.SslDetails.CertificateIssuer}");
            
            // 5. 效能測試
            result.PerformanceTest = await TestSslPerformance(builder);
            Console.WriteLine($"5. 效能測試:");
            Console.WriteLine($"   無SSL連線時間: {result.PerformanceTest.NoSslTime}ms");
            Console.WriteLine($"   SSL連線時間: {result.PerformanceTest.SslTime}ms");
            Console.WriteLine($"   效能影響: +{result.PerformanceTest.PerformanceImpact:F1}%");
        }
        
        // 6. 建議設定
        result.RecommendedSettings = GetRecommendedSettings(result);
        Console.WriteLine($"6. 建議設定:");
        Console.WriteLine($"   Encrypt: {result.RecommendedSettings.Encrypt}");
        Console.WriteLine($"   TrustServerCertificate: {result.RecommendedSettings.TrustServerCertificate}");
        
    }
    catch (Exception ex)
    {
        Console.WriteLine($"檢查過程發生錯誤：{ex.Message}");
        result.ErrorMessage = ex.Message;
    }
    
    return result;
}

/// <summary>
/// 測試基本連線（無SSL）
/// </summary>
private static async Task<bool> TestBasicConnection(SqlConnectionStringBuilder builder)
{
    try
    {
        var testBuilder = new SqlConnectionStringBuilder(builder.ConnectionString);
        testBuilder.Encrypt = false;
        testBuilder.ConnectTimeout = 10;
        
        using (var connection = new SqlConnection(testBuilder.ConnectionString))
        {
            await connection.OpenAsync();
            return true;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   基本連線錯誤：{ex.Message}");
        return false;
    }
}

/// <summary>
/// 測試SSL連線
/// </summary>
private static async Task<bool> TestSslConnection(SqlConnectionStringBuilder builder, bool trustCertificate)
{
    try
    {
        var testBuilder = new SqlConnectionStringBuilder(builder.ConnectionString);
        testBuilder.Encrypt = true;
        testBuilder.TrustServerCertificate = trustCertificate;
        testBuilder.ConnectTimeout = 10;
        
        using (var connection = new SqlConnection(testBuilder.ConnectionString))
        {
            await connection.OpenAsync();
            
            // 驗證連線確實使用SSL
            using (var command = new SqlCommand(
                "SELECT ENCRYPT_OPTION FROM sys.dm_exec_connections WHERE session_id = @@SPID", 
                connection))
            {
                var encryptOption = await command.ExecuteScalarAsync();
                return encryptOption?.ToString() == "TRUE";
            }
        }
    }
    catch (Exception ex)
    {
        string certMode = trustCertificate ? "信任憑證" : "驗證憑證";
        Console.WriteLine($"   SSL連線錯誤（{certMode}）：{ex.Message}");
        return false;
    }
}

/// <summary>
/// 取得SSL詳細資訊
/// </summary>
private static async Task<SslDetails> GetSslDetails(SqlConnectionStringBuilder builder)
{
    var details = new SslDetails();
    
    try
    {
        var testBuilder = new SqlConnectionStringBuilder(builder.ConnectionString);
        testBuilder.Encrypt = true;
        testBuilder.TrustServerCertificate = true; // 使用信任模式取得詳細資訊
        
        using (var connection = new SqlConnection(testBuilder.ConnectionString))
        {
            await connection.OpenAsync();
            
            // 查詢SSL相關資訊
            string query = @"
                SELECT 
                    encrypt_option,
                    auth_scheme,
                    local_net_address,
                    local_tcp_port
                FROM sys.dm_exec_connections 
                WHERE session_id = @@SPID";
            
            using (var command = new SqlCommand(query, connection))
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    details.EncryptionAlgorithm = reader["encrypt_option"]?.ToString() ?? "Unknown";
                    details.AuthScheme = reader["auth_scheme"]?.ToString() ?? "Unknown";
                    details.ServerAddress = reader["local_net_address"]?.ToString() ?? "Unknown";
                    details.ServerPort = reader["local_tcp_port"]?.ToString() ?? "Unknown";
                }
            }
        }
        
        // 嘗試取得憑證資訊（這部分可能需要額外權限）
        details.CertificateSubject = "需要進一步查詢";
        details.CertificateIssuer = "需要進一步查詢";
        
    }
    catch (Exception ex)
    {
        details.EncryptionAlgorithm = $"查詢失敗：{ex.Message}";
    }
    
    return details;
}

/// <summary>
/// SSL效能測試
/// </summary>
private static async Task<PerformanceTestResult> TestSslPerformance(SqlConnectionStringBuilder builder)
{
    var result = new PerformanceTestResult();
    
    try
    {
        // 測試無SSL連線時間
        var noSslBuilder = new SqlConnectionStringBuilder(builder.ConnectionString);
        noSslBuilder.Encrypt = false;
        result.NoSslTime = await MeasureConnectionTime(noSslBuilder);
        
        // 測試SSL連線時間
        var sslBuilder = new SqlConnectionStringBuilder(builder.ConnectionString);
        sslBuilder.Encrypt = true;
        sslBuilder.TrustServerCertificate = true;
        result.SslTime = await MeasureConnectionTime(sslBuilder);
        
        // 計算效能影響
        if (result.NoSslTime > 0)
        {
            result.PerformanceImpact = ((result.SslTime - result.NoSslTime) / result.NoSslTime) * 100;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   效能測試錯誤：{ex.Message}");
    }
    
    return result;
}

/// <summary>
/// 測量連線時間
/// </summary>
private static async Task<double> MeasureConnectionTime(SqlConnectionStringBuilder builder)
{
    var stopwatch = System.Diagnostics.Stopwatch.StartNew();
    
    try
    {
        builder.ConnectTimeout = 30;
        using (var connection = new SqlConnection(builder.ConnectionString))
        {
            await connection.OpenAsync();
        }
        
        stopwatch.Stop();
        return stopwatch.Elapsed.TotalMilliseconds;
    }
    catch
    {
        stopwatch.Stop();
        return -1; // 表示連線失敗
    }
}

/// <summary>
/// 取得建議設定
/// </summary>
private static RecommendedSettings GetRecommendedSettings(SslCheckResult result)
{
    var settings = new RecommendedSettings();
    
    if (result.SslSupported)
    {
        settings.Encrypt = true;
        settings.TrustServerCertificate = !result.CertificateValid; // 如果憑證無效則信任
        settings.Reason = result.CertificateValid ? 
            "伺服器支援SSL且憑證有效，建議使用嚴格模式" : 
            "伺服器支援SSL但憑證無效，使用信任模式";
    }
    else
    {
        settings.Encrypt = false;
        settings.TrustServerCertificate = false;
        settings.Reason = "伺服器不支援SSL，暫時使用非加密連線";
    }
    
    return settings;
}

/// <summary>
/// 在WinForm中顯示檢查結果
/// </summary>
public static async void ShowSslCheckDialog()
{
    var form = new Form
    {
        Text = "SQL Server SSL 檢查",
        Width = 600,
        Height = 500,
        StartPosition = FormStartPosition.CenterParent
    };
    
    var textBox = new TextBox
    {
        Multiline = true,
        ScrollBars = ScrollBars.Vertical,
        Dock = DockStyle.Fill,
        ReadOnly = true,
        Font = new System.Drawing.Font("Consolas", 9)
    };
    
    var button = new Button
    {
        Text = "開始檢查",
        Dock = DockStyle.Bottom,
        Height = 40
    };
    
    button.Click += async (s, e) =>
    {
        button.Enabled = false;
        textBox.Text = "正在檢查SSL支援狀況...\r\n";
        
        // 重導Console輸出到TextBox
        var originalOut = Console.Out;
        var stringWriter = new System.IO.StringWriter();
        Console.SetOut(stringWriter);
        
        try
        {
            var result = await CheckSqlServerSslSupport();
            textBox.Text = stringWriter.ToString();
            
            // 加入總結
            textBox.AppendText("\r\n=== 檢查總結 ===\r\n");
            textBox.AppendText($"SSL支援: {(result.SslSupported ? "是" : "否")}\r\n");
            textBox.AppendText($"建議設定: Encrypt={result.RecommendedSettings?.Encrypt}, TrustServerCertificate={result.RecommendedSettings?.TrustServerCertificate}\r\n");
            textBox.AppendText($"說明: {result.RecommendedSettings?.Reason}\r\n");
        }
        finally
        {
            Console.SetOut(originalOut);
            button.Enabled = true;
        }
    };
    
    form.Controls.Add(textBox);
    form.Controls.Add(button);
    form.ShowDialog();
}
```

}

// ============================================================================
// 資料結構定義
// ============================================================================

public class SslCheckResult
{
public bool BasicConnection { get; set; }
public bool SslSupported { get; set; }
public bool CertificateValid { get; set; }
public SslDetails SslDetails { get; set; }
public PerformanceTestResult PerformanceTest { get; set; }
public RecommendedSettings RecommendedSettings { get; set; }
public string ErrorMessage { get; set; }
}

public class SslDetails
{
public string EncryptionAlgorithm { get; set; }
public string AuthScheme { get; set; }
public string CertificateSubject { get; set; }
public string CertificateIssuer { get; set; }
public string ServerAddress { get; set; }
public string ServerPort { get; set; }
}

public class PerformanceTestResult
{
public double NoSslTime { get; set; }
public double SslTime { get; set; }
public double PerformanceImpact { get; set; }
}

public class RecommendedSettings
{
public bool Encrypt { get; set; }
public bool TrustServerCertificate { get; set; }
public string Reason { get; set; }
}

// ============================================================================
// 使用範例
// ============================================================================

public partial class Form1 : Form
{
// 在您的Form中加入這個按鈕事件
private async void btnCheckSsl_Click(object sender, EventArgs e)
{
// 方法1：顯示對話框
SqlServerSslChecker.ShowSslCheckDialog();

```
    // 方法2：直接在控制台執行
    /*
    var result = await SqlServerSslChecker.CheckSqlServerSslSupport();
    
    if (result.SslSupported)
    {
        MessageBox.Show($"SSL檢查完成！\n\n建議設定:\nEncrypt={result.RecommendedSettings.Encrypt}\nTrustServerCertificate={result.RecommendedSettings.TrustServerCertificate}\n\n{result.RecommendedSettings.Reason}", 
            "SSL檢查結果", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    else
    {
        MessageBox.Show("伺服器不支援SSL加密\n建議聯絡資料庫管理員啟用SSL", 
            "SSL檢查結果", MessageBoxButtons.OK, MessageBoxIcon.Warning);
    }
    */
}
```

}

// ============================================================================
// 快速檢查方法（適合加在現有程式碼中）
// ============================================================================

/// <summary>
/// 快速檢查SSL支援（適合在現有連線方法中使用）
/// </summary>
/// <returns></returns>
public static bool QuickSslCheck()
{
try
{
string connectionString = GetConnectionStringTest();
var builder = new SqlConnectionStringBuilder(connectionString);
builder.Encrypt = true;
builder.TrustServerCertificate = true;
builder.ConnectTimeout = 5;

```
    using (var connection = new SqlConnection(builder.ConnectionString))
    {
        connection.Open();
        
        using (var command = new SqlCommand("SELECT ENCRYPT_OPTION FROM sys.dm_exec_connections WHERE session_id = @@SPID", connection))
        {
            var result = command.ExecuteScalar()?.ToString();
            return result == "TRUE";
        }
    }
}
catch
{
    return false;
}
```

}